R U getting My Screen and Voice?
If you are getting my screen and voice please rejoin with the meeting.

String Manipulations:
----------------------
IN C and C++ programming languages, to perform String operations we have some predefined functions or library.

Similarily, to perform String operations in Java, JAVA has provided the complete predefined library in the form of the following classes.

1.java.lang.String
2.java.lang.StringBuffer
3.java.lang.StringBuilder
4.java.util.StringTokenizer

Q)What is the difference between String and StringBuffer?
---------------------------------------------------------
Ans:
----
String class objects are immutable objects, Immutable objects are java objects, they are not allowing modifications on their content, if we are trying to perform modifcations over the data then data is allowed for modifcations but the resultent data will not be stored back in original object, here the resultent data will be stored by creating new Object. 

StringBuffer class objects are mutable objects, these objects are allowing modifications directly on their content.

Note: String class objects are fixed length objects, but, StringBuffer class objects are variable length objects.

Q)What are the differences between StringBuffer and StringBuilder?
------------------------------------------------------------------
Ans:
----
1.StringBuffer class was imtroduced in JDK1.0 version.
  StringBuilder class was introduced in JDK5.0 version.

2.StringBuffer is synchronized .
  StringBuilder is non synchroized.

3.Almost all the methods of StringBuffer are synchronized methods.
  No method is synchronized method in StringBuilder.

4.StringBuffer is able to allow only one thread to access data.
  StringBuilder is able to allow more than one thread to access data.

5.StringBuffer is able to follow sequential kind of execution.
  StringBuilder is able to follow parallel kind of execution.

6.StringBuffer will increase execution time.
  StringBuilder will reduce execution time.

7.StringBuffer will reduce applicatino performance.
  StringBuilder will improve application performance.

8.StringBuffer will give guarantee for Data Consistency.
  StringBuilder will not giive guarantee for data consistency.

9.StringBuffer is threadsafe.
  StringBuilder is not threadsafe.


Q)What is StringTokenization and how it is possible to perfrom StringTokenization in java applications?
-----------------------------------------------------------------
Ans:
----
The process of deviding a string into no of pieces[Tokens] is called as String Tokenization.
EX:
---
String data="Durga Software Solutions";

Tokens: Durga
        Software
        Solutions

To perform String Tokenization in java applicatins, JAVA has provided a predefined class in the form of java.util.StringTokenizer.

We will use StringTokenization in the following requieremennts.
1.To prepare Lexical Analysis or Lexacl Analyzer components in Compiler   constructors.
2.To convert numbers from word representation to numeric   representations.
 
To perform String Tokenization in java applications we have to use the following steps:

1.Create StringTokenizer class object.
2.Retrive tokens from StringTokenizer object.

1.Create StringTokenizer class object.
---------------------------------------
To create StringTokenizer class object we have to use the following constructor.

public StringTokenizer(String data)
--> It will perform String Tokenization on the basis of     "space'[Delimiter] 
public StringTokenizer(String data, String reg_Expr)
--> It will perform String Tokenization on the basis of the specified     reg_Expr.
 
EX: StringTokenizer st=new StringTokenizer("Durga Software Solutions");

When JVM encounter the above instruction, JVM will take the provided string, JVM willd evide that String into no of tokens and JVM will store that no of tokens by creating StringTokenizer class object.

Note: When StringTokenizer class object is created then JVM will craete cursor or pointer before the first token in StringTokenizer object.

2.Retrive tokens from StringTokenizer object.
----------------------------------------------
a)Check whether more tokens are existed or not from the current cursor   position by using the following method.
     public boolean hasMoreTokens()
     --> It will return true value if atleast next token is available.
     -->It will return false value if no more tokens are existed from         current cursor position.
b)If atleast next token is available then read next token and move cursor to next position by using the folloowing method.
  public String nextToken()
 
Note: To count the no of tokens in StringTokenizer class object we have to use the following method.

   public int countTokens()

EX:
----
import java.util.*;
class StringTokenizerEx 
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("Durga Software Solutions");
		System.out.println("No Of Tokens  :"+st.countTokens());
		while(st.hasMoreTokens())
		{
			System.out.println(st.nextToken());
		}
	}
}
        
String class Library:
----------------------
Constructors:
-------------
1.public String()
--> It can be used to create an empty String object.
EX: String str=new String();

2.public String(String data)
--> It can be used to create String class object with the specified string data.
EX:
---
String str=new String("Durga Software Solutions");
System.out.println(str);

Q)What is the difference between the following two statements? 
    1.String str="abc";
    2.String str=new String("abc");
-----------------------------------------------------------------
Ans:
----
Both statements are used to create String class objects with teh specified data.

To create String object if we use first statement then String object will be created in "String Constant Pool Area" [It is a part in Method Area], These objects are not eligible for Garbage Collection, These objects are destroyed when JVM goto shutdown mode or when java application is terminated its execution. 

To create String object if we use second statement[Using new keyword] then String object will be created in Heap Memory[ and also created in String Constant Pool Area becasause of "abc"] , but "str" reference variable is able to refer only Heap memory created object, here Heap memory managed String objects are eligible for Garbage Collection.

3.public String(byte[] b)
--> It can be used to create String class object with string equalent of the specified byte[].
EX:
---
byte[] b={65, 66, 67, 68, 69, 70};
String str=new String(b);
System.out.println(str);
OP: ABCDEF

4.public String(byte[] b, int start_Index, int No_Chars)
--> It can be used to create String class object with the string equalent of the specified byte[] starts from the specified start index and upto the specified no of characters.
EX:
---
byte[] b={65, 66, 67, 68, 69, 70};
String str=new String(b,1,3);
System.out.println(str);
OP: BCD

Note: Constructors 3 and 4 are used to convert data from byte[] to String.

5.public String(char[] ch)
-->It can be sued to create String class object with the srting equalent of the specified char[].
EX:
---
char[] ch={'A','B','C','D','E','F'};
String str=new String(ch);
System.out.println(str);
OP: ABCDEF

6.public String(char[] ch, int start_Index, int no_Of_Chars)
-->It can be sued to create String class object with the srting equalent of the specified char[] starts from the specified start index and upto the specified no of characters.
EX:
---
char[] ch={'A','B','C','D','E','F'};
String str=new String(ch, 1, 3);
System.out.println(str);
OP: BCD

Methods:
---------
1.public int length()
--> It will return no of characters existed in string or size of the String. 
EX:
---
String str=new String("Durga Software Solutions");
System.out.println(str.length());

2.public String concat(String str)
--> It will add the specified String data to String object content in immutable nature.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		String str1=new String("Durga");
		String str2=str1.concat("Software ");
		String str3=str2.concat("Solutions");
		System.out.println(str1);
		System.out.println(str2);
		System.out.println(str3);
	}
}
OP:
---
Durga 
Durga Software
Durga Software Solutions

3.public boolean equals(String str)
-->It will check whether two String object contents are same or not.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		String str1=new String("abc");
		String str2=new String("abc");
		System.out.println(str1.equals(str2));
	}
}

Q)What is the difference between == operator and equals(-) method?
--------------------------------------------------------------------
Ans:
----
== is a boolean operator, it will check whether two operands are same or not, where the operands may be normal primitive variables or object reference variables.

Initiallly , equals(-) method was defined in java.lang.Object class , it was implemented in such way to perform two objects references comparision,but , String class has overridden Object class equals(-) method in such a way to perform String objects contents.

EX:
---
class A
{
}
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;
		int j=10;

		A a1=new A();
		A a2=new A();

		String str1=new String("abc");
		String str2=new String("abc");

		System.out.println(i == j);// true
		System.out.println(a1 == a2);// false
		System.out.println(str1 == str2);// false

		System.out.println(a1.equals(a2));// false
		System.out.println(str1.equals(str2));// true

	}
}

4.public boolean equalsIgnoreCase(String str)
--> equals() method will perform case sensitive comparision, but, e	equalsIgnireCase() method will perform case insensitive comparision.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		String str1=new String("abc");
		String str2=new String("ABC");
		System.out.println(str1.equals(str2));// false
		System.out.println(str1.equalsIgnoreCase(str2));// true

	}
}

5.public int compareTo(String str)
--> It will check whether two String objects are available in dictionary  order or not.

str1.compareTo(str2)
1. If str1 come first when compared with str2 in dictionary order then compareTo() method will return -ve value.
2.If str2 come first when compared with str1 in dictinary order then compareTo() method will return + ve value.
3.If str1 and str2 values are available at the same position in dictionary order then compareTo() method will return 0 value.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		String str1=new String("abc");
		String str2=new String("def");
		String str3=new String("abc");
		System.out.println(str1.compareTo(str2));//-ve
		System.out.println(str2.compareTo(str3));//+ve
		System.out.println(str3.compareTo(str1));// 0

	}
}

6.public boolean startsWith(String str)
--> it will check whether a string starts with the specified string or not.

7.public boolean endsWith(String str)
--> It will check whether a string ends with the specified srtring or not.

8.public boolean contains(String str)
--> It will check whether a sting contains the specified String or not.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		String str= new String("Durga Software Solutions");
		System.out.println(str.startsWith("Durga"));
		System.out.println(str.endsWith("Solutions"));
		System.out.println(str.contains("Software"));

	}
}

9. public char charAt(int idex)
--> It will return a character exiswted at the specified index value.
 
10.public String replace(char old_Char, char new_Char)
--> It will replace the specified old_Char with the specified new_Char.

11.public int indexOf(String str)
--> It will return an index value where the first occurence of the specified SXtring.

12.public int lastIndexOf(String str)
--> It will return an index value where the last occurfence of the specified String.
EX:
---
 class Test 
{
	public static void main(String[] args) 
	{
		String str= new String("Durga Software Solutions");
		System.out.println(str);
		System.out.println(str.charAt(6));// S
		System.out.println(str.replace('S', 's'));
		System.out.println(str.indexOf("So"));// 6
		System.out.println(str.lastIndexOf("So"));// 15

	}
}

13.public String substring(int start_index)
--> It wil return a sub string starts from the specified start index.

14.public String substring(int start_Index, int end_Index) 
--> It will return substring starts from the specified start index and upto the specified end index.

15.public String toLowerCase()
--> It will convert all upper case letters into lower case letters.

16.public String toUpperCase()
--> It will convert all lower case letters into upper acse letters.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		String str= new String("Durga Software Solutions");
		System.out.println(str);
		System.out.println(str.substring(6));
		System.out.println(str.substring(6,14));
		System.out.println(str.toLowerCase());
		System.out.println(str.toUpperCase());
	}
}

17.public byte[] getBytes()
--> This method can be used to convert string into byte[]. 

18.public char[] toCharArray()
-->This method can be sued to convert data from String type to char[] type. 

19.public String[] split(String str)
--> It will devide a string into no of pieces in the form of String[].
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		String str= new String("Durga Software Solutions");
		System.out.println(str);
		byte[] b=str.getBytes();
		for(int i=0;i<b.length;i++)
		{
			System.out.print(b[i]+" ");
		}
		System.out.println();
		char[] ch=str.toCharArray();
		for(int i=0;i<ch.length;i++)
		{
			System.out.print(ch[i]+" ");
		}
		System.out.println();
		String[] s=str.split(" ");
		for(int i=0;i<s.length;i++)
		{
			System.out.println(s[i]);
		}
	}
}

20.public String trim()
--> It able to remove prespaces and post spaces of a particularstring.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		String str= new String("    Durga Software Solutions   ");
		System.out.println(str);
		System.out.println(str.trim());
		
	}
}

StringBuffer Class Library:
-----------------------------
Constructors:
--------------
1.public StringBuffer()
--> It can be sued to create an empty StringBuffer class object with 16 elements as initial capacity.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer();
		System.out.println(sb.capacity());
		
	}
}
OP: 16

2.public StringBuffer(int capacity)
-->This constructor can be used to create an empty StringBuffer class object with the specified capacity value.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer(20);
		System.out.println(sb.capacity());
		
	}
}
OP: 20

3.public StringBuffer(String str)
--> It can be used to create StringBuffer class object with the specified String data.

Note: Here capaqcity value will be incremented like below.
    new_capacity=Initil_Capacity_data_Length
EX:
----
class Test 
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer("abc");
		System.out.println(sb);
		System.out.println(sb.capacity());
		
	}
}

Methods:
--------
1.public StringBuffer append(String str)
--> It append the specified String data to StringBuffer object content in mutable manner.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		StringBuffer sb1=new StringBuffer("Durga ");
		StringBuffer sb2=sb1.append("Software ");
		StringBuffer sb3=sb2.append("Solutions");
		System.out.println(sb1);
		System.out.println(sb2);
		System.out.println(sb3);
	
	}
}
OP:
---
Durga Software Solutiouns
Durga Software Solutiouns
Durga Software Solutiouns

2.public void ensureCapacity(int capacity)
-->It can be used to set capacity value to StringBuffer explicitly.
If thecapacity value is less than 16 then StringBuffercapacity value is 16. If thecapacity value is greaterthan 16 and less than 34 the StringBuffer capacity will be 34 and if the capacity value is greater than 34 then the specified capacity value is the capacity of StringBuffer .
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer();
		sb.ensureCapacity(35);
		System.out.println(sb.capacity());
	}
}
OP:
35

3.public StringBuffer reverse()
-->It will reverse the content of StringBuffer object.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer("Durga Software Solutions");
		System.out.println(sb.reverse());	
	}
}

4.public StringBuffer delete(int start_Index, int end_Index)
--> It will delete a sub string starts from the specified start index and upto the specified end index.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer("Durga Software Solutions");
		System.out.println(sb.delete(6,14));	
	}
}
OP
--
Durga Solutions

5.public StringBuffer insert(int index, String str)
--> This method can be used to insert the specified String at the specified index in StringBuffer object content.
EX:
---
class Test 
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer("Durga Solutions");
		System.out.println(sb.insert(6,"Software "));	
	}
}
Durga Software Solutions
 




 





















 



  






























